{{- $config := .Values.config -}}
{{- $name := $config.name -}}
{{- $global := .Values.global -}}
{{- $isOpenshift := (eq $global.target "okd") -}}

{{- if and .Values.enabled $isOpenshift }}

apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: {{ $config.appLabel }}
  name: {{ $name }}
spec:
  replicas: {{ $config.replicas }}
  selector:
    app: {{ $config.appLabel }}
    name: {{ $name }}
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        app: {{ $config.appLabel }}
        name: {{ $name }}
    spec:
      containers:
        - image: "{{ $config.imageRegistry | default $global.imageRegistry }}/{{ $config.imageName }}:{{ $config.imageVersion }}"
          imagePullPolicy: {{ $config.imagePullPolicy }}
          name: {{ $name }}
          {{- if .Values.env }}
          env:
{{ tpl (toYaml .Values.env) . | indent 12 }}
          {{- end }}
          ports:
            {{- range .Values.tcpPorts }}
            - containerPort: {{.}}
              protocol: TCP
            {{- end }}
          {{- if $config.resources }}
          resources:
{{ tpl (toYaml $config.resources) . | indent 12 }}
          {{- end }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/lib/rabbitmq
              name: "{{ $name }}-volume"
            - mountPath: /var/log/rabbitmq
              name: "{{ $name }}-logs-volume"
            - mountPath: /etc/rabbitmq/enabled_plugins
              name: "{{ $name }}-plugins"
              subPath: enabled_plugins
      dnsPolicy: ClusterFirst
      {{- if $config.imagePullSecrets }}
      imagePullSecrets:
        {{ toYaml $config.imagePullSecrets }}
      {{- else if $global.imagePullSecrets }}
      imagePullSecrets:
        {{ toYaml $global.imagePullSecrets }}
      {{- end }}
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: {}
          name: "{{ $name }}-volume"
        - emptyDir: {}
          name: "{{ $name }}-logs-volume"
        - configMap:
            defaultMode: 420
            name: "{{ $name }}-plugins"
          name: "{{ $name }}-plugins"
  test: false
  triggers:
    - type: ConfigChange
---
{{- end }}
